#!/usr/bin/env python3

import collections
import json
import random
import shlex
import socket

from perfectstorm.clients.monitor import MonitorPollingExecutor, ApplicationsMonitor
from perfectstorm.management import SingleServerManager, GroupBackendManager


HAPROXY_CONFIG = """\
global
    stats socket ipv4@0.0.0.0:9000 level admin
    stats timeout 30s

frontend localnodes
    bind *:$PORT
    mode http
    default_backend nodes

backend nodes
    mode http
    balance roundrobin
    server-template member 1-1024 127.0.0.1:$PORT check disabled
"""

LOAD_BALANCER_RECIPE = {
    'type': 'docker',
    'content': json.dumps({
        'run': [
            ['--net', 'host', 'haproxy', 'sh', '-c',
             'echo -n {} > /etc/haproxy.cfg && haproxy -W -db -f /etc/haproxy.cfg'.format(shlex.quote(HAPROXY_CONFIG))],
        ],
    }),
    'params': {
        'PORT': '80',
    },
}

HAProxyServerState = collections.namedtuple(
	'HAProxyServerState',
    (
        'be_id',
        'be_name',
        'srv_id',
        'srv_name',
        'srv_addr',
        'srv_op_state',
        'srv_admin_state',
        'srv_uweight',
        'srv_iweight',
        'srv_time_since_last_change',
        'srv_check_status',
        'srv_check_result',
        'srv_check_health',
        'srv_check_state',
        'srv_agent_state',
        'bk_f_forced_id',
        'srv_f_forced_id',
        'srv_fqdn',
        'srv_port',
))


class HAProxy:

    def __init__(self, address):
        self.address = address
        self._slots = None

    def exec(self, command, *args):
        lines = []
        command = command.format(*args) + '\n'

        with socket.create_connection(self.address) as sock:
            sock.sendall(command.encode('ascii'))

            with sock.makefile(encoding='ascii') as fp:
                for line in fp:
                    line = line.strip()
                    if not line or line.startswith('#'):
                        continue
                    lines.append(line)

        return lines

    def get_slots(self):
        if self._slots is None:
            self._slots = self._retrieve_slots()
        return self._slots

    def _retrieve_slots(self):
        slots = {None: []}
        lines = iter(self.exec('show servers state nodes'))

        format_version = next(lines)
        assert format_version == '1'

        for line in lines:
            state = HAProxyServerState(*line.split())
            if state.srv_op_state == '2' and state.srv_admin_state == '4':
                addr = state.srv_addr
            else:
                addr = None
            slots.setdefault(addr, []).append(state.srv_name)

        return slots

    def get_members(self):
        members = set(self.get_slots().keys())
        members.discard(None)
        return members

    def add_member(self, member_address):
        slots = self.get_slots()
        free_slots = slots[None]
        if not free_slots:
            raise ValueError('No free slots available')

        srv_name = free_slots.pop(-1)

        self.exec('set server nodes/{} addr {}', srv_name, member_address)
        self.exec('set server nodes/{} state ready', srv_name)

        print('Added new member {} to {}'.format(member_address, self.address[0]))

    def remove_member(self, member_address):
        slots = self.get_slots()
        matching_slots = slots.get(member_address, [])

        for srv_name in matching_slots:
            self.exec('set server nodes/{} state maint', srv_name)
            print('Deleted member {} from {}'.format(member_address, self.address[0]))


class LoadBalancerBackendManager(GroupBackendManager):

    def update_members(self, server):
        server_node = self.api.shortcuts.get_node_for(server.server)
        server_address = self.api.shortcuts.get_address_for(server_node)

        haproxy = HAProxy((server_address, 9000))

        haproxy_members = haproxy.get_members()
        expected_members = self.get_members(server)

        to_add = expected_members.difference(haproxy_members)
        to_delete = haproxy_members.difference(expected_members)

        for addr in to_delete:
            haproxy.remove_member(addr)

        for addr in to_add:
            haproxy.add_member(addr)

    def get_members(self, server):
        addresses = set()

        nodes = [node['cloud_id'] for node in server.nodes_pool_group.members(status='UP')]
        members = self.group.members(
            status='UP',
            engine={
                'cloud_id': {
                    '$in': nodes,
                }
            },
        )

        for member in members:
            node = self.api.shortcuts.get_node_for(member)
            addresses.add(self.api.shortcuts.get_address_for(node))

        return addresses


class LoadBalancerServerManager(SingleServerManager):

    name = 'load-balancer'

    recipe_data = LOAD_BALANCER_RECIPE

    def __init__(self, service, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.service = service

    def get_recipe_params(self):
        return {'PORT': str(self.service['port'])}


class LoadBalancerExecutor(MonitorPollingExecutor):

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.managers = []
        self.groups = {}

    def add_arguments(self):
        super().add_arguments()
        self.parser.add_argument('-n', '--nodes-pool', required=True,
            help='Group name of nodes where load balancers will be started')

    def setup_monitors(self):
        self.apps_monitor = ApplicationsMonitor(self.api)
        self.monitors.append(self.apps_monitor)

    def run(self):
        added, deleted, updated = self.apps_monitor.get_changes()

        for app in added:
            for service in app['expose']:
                self.start_load_balancer(service['component'], service['service'])

        # XXX Handle 'updated' and 'deleted'

        for manager in self.managers:
            manager.update()

    def start_load_balancer(self, group_name, service_name):
        group = self.api.groups.get(group_name)

        for service in group['services']:
            if service['name'] == service_name:
                break
        else:
            raise ValueError(service_name)

        nodes_pool_group = self.api.groups.get(self.options.nodes_pool)

        backend_manager = LoadBalancerBackendManager(
            api=self.api, group=group)

        server_manager = LoadBalancerServerManager(
            api=self.api,
            service=service,
            nodes_pool_group=nodes_pool_group,
            backend=backend_manager)

        self.managers.append(server_manager)
        self.monitors.extend(server_manager.get_monitors())


if __name__ == '__main__':
    LoadBalancerExecutor().main()
